#!/usr/bin/python

DOCUMENTATION = '''
---
module: influxdb_user
short_description: Adds or removes a user from an InfluxDB database.
description:
   - Adds or removes a user from a InfluxDB database.
options:
  name:
    description:
      - name of the user (role) to add or remove
    required: true
  password:
    description:
      - set the user's password
    required: false
    default: null
  login_user:
    description:
      - The username used to authenticate with
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with
    required: false
    default: null
  login_url:
    description:
      - Host running the database
    required: false
    default: http://localhost:8086
  state:
    description:
      - Whether the user should exist.  When C(absent), removes
        the user.
    required: false
    default: present
    choices: [ "present", "absent" ]
  database:
    description:
      - Give permissions to this database
    required: false
    default: null
  privledges:
    description:
      - Level of permissions to grant
    required: false
    default: "ALL"
    choices: [ "ALL", "READ", "WRITE" ]
notes:
   - Requires the influxdb Python package on the remote host: pip install influxdb

requirements: [ "influxdb" ]
author: "Timothy Allen (@allen13)"
'''

EXAMPLES = """
# Create admin user
- influxdb_user: login_url=http://localhost:8086 login_user=admin login_password=admin user=admin password=admin privledges=ALL
"""

try:
    from influxdb import InfluxDBClient
except ImportError:
    influxdb_found = False
else:
    influxdb_found = True

def user_exists(client, user):
    users = user_row["user"] for user_row in client.get_list_users()
    user in users

def create_user(client, user, password, privledges, database):
    user_exists = user_exists(client, user)

	if !user_exists:
        client.create_user(user, password)

        grant_privledges_query = ""
		if database == "":
			grant_privledges_query = "GRANT %s TO %s" % (privledges, user)
		else:
			grant_privledges_query = "GRANT %s ON %s TO %s" % (privledges, database, user)

        client.query(grant_privledges_query)

	return !user_exists

def main():
    module = AnsibleModule(
        argument_spec = dict(
            login_user=dict(default=None),
            login_password=dict(default=None),
            login_host=dict(default="localhost"),
            login_port=dict(default="8086")
            user=dict(required=True, aliases=['name']),
            password=dict(default=None, required=True, no_log=True),
            state=dict(default="present", choices=["absent", "present"]),
            privledges=dict(default=None, choices=["ALL", "READ", "WRITE"]),
            database=dict(default=""),
        )
    )

    if not influxdb_found:
        module.fail_json(msg="the python mysqldb module is required")

    login_user = module.params["login_user"]
    login_password = module.params["login_password"]
    login_host = module.params["login_host"]
    login_port = module.params["login_port"]
    user = module.params["user"]
    password = module.params["password"]
    state = module.params["state"]
    privledges = module.params["privledges"]
    database = module.params['database']

    client = InfluxDBClient(login_host, login_port, login_user, login_password)
    user_created = create_user(client, user, password, privledges, database)

    module.exit_json(changed=user_created)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
