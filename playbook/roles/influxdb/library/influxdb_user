#!/usr/bin/python

DOCUMENTATION = '''
---
module: influxdb_user
short_description: Adds or removes a user from an InfluxDB database.
description:
   - Adds or removes a user from a InfluxDB database.
options:
  name:
    description:
      - name of the user (role) to add or remove
    required: true
  password:
    description:
      - set the user's password
    required: false
    default: null
  login_user:
    description:
      - The username used to authenticate with
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with
    required: false
    default: null
  login_host:
    description:
      - Host running the database
    required: false
    default: localhost
  login_port:
    description:
      - Host port running the database
    required: false
    default: 8086
  database:
    description:
      - Give permissions to this database and create it if it doesn't exist
    required: false
    default: null
  privilege:
    description:
      - Level of permissions to grant
    required: false
    default: 'ALL'
    choices: [ 'ALL', 'READ', 'WRITE' ]

notes:
   - Requires the influxdb Python package on the remote host: pip install influxdb

requirements: [ 'influxdb' ]
author: 'Timothy Allen (@allen13)'
'''

EXAMPLES = """
# Create admin user
- influxdb_user: login_host=localhost login_user=admin login_password=admin user=admin password=admin privilege=ALL
"""

try:
    from influxdb import InfluxDBClient
    from influxdb.exceptions import InfluxDBClientError
except ImportError:
    influxdb_found = False
else:
    influxdb_found = True

def user_exists(client, user, is_admin):
    exists = False
    try:
        exists = any([user_row['user'] == user for user_row in client.get_list_users()])
    except InfluxDBClientError as influx_error:
        if is_admin:
            return False
        else:
            raise influx_error
    return exists

def database_exists(client, database):
    return any([db_row['name'] == database for db_row in client.get_list_database()])

def create_user(client, user, password, privilege, database):
    is_admin = (privilege == 'ALL' and database == '')
    exists = user_exists(client, user, is_admin)

    if not exists:
        client.create_user(user, password, is_admin)

    if database != '':
        if not database_exists(client, database):
            client.create_database(database)
            client.grant_privilege(privilege, database, user)

    return not exists

def main():
    module = AnsibleModule(
        argument_spec = dict(
            login_user=dict(default=None),
            login_password=dict(default=None),
            login_host=dict(default='localhost'),
            login_port=dict(default='8086'),
            user=dict(required=True, aliases=['name']),
            password=dict(default=None, required=True, no_log=True),
            privilege=dict(default='READ', choices=['ALL', 'READ', 'WRITE']),
            database=dict(default='')
        )
    )

    if not influxdb_found:
        module.fail_json(msg='the python influxdb package is required')

    login_user = module.params['login_user']
    login_password = module.params['login_password']
    login_host = module.params['login_host']
    login_port = module.params['login_port']
    user = module.params['user']
    password = module.params['password']
    privilege = module.params['privilege']
    database = module.params['database']

    client = InfluxDBClient(login_host, login_port, login_user, login_password)
    user_created = create_user(client, user, password, privilege, database)

    module.exit_json(changed=user_created)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
